package gui;

import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;

public class RequestATransfer extends javax.swing.JFrame {

    server.DBHelper db = new server.DBHelper();
    Connection con;
    ResultSet rs;
    PreparedStatement ps;
    ResultSet rsTPro;
    PreparedStatement psTPro;
    ResultSet rsTDep;
    PreparedStatement psTDep;
    ResultSet rsTPos;
    PreparedStatement psTPos;
    SimpleDateFormat ft = new SimpleDateFormat("yyyy/MM/dd");
    public RequestATransfer(String empNumber) {
        initComponents();
        ImageIcon img = new ImageIcon("image//request.png");
        this.setIconImage(img.getImage());
        this.setResizable(false);
        lblEmpNumber.setText(empNumber);
        lblEmpNumber.setVisible(false);
        lblCountRequest.setText("0");
        lblCountRequest.setVisible(false);
        txtRelievingDate.setDateFormatString("dd/MM/yyyy");
        txtJoiningDate.setDateFormatString("dd/MM/yyyy");
        
        loadData();
        
        lblLogo.setSize(100, 100);
        new SetImage().setImageLable(lblLogo, "image//logo1.png");
    }

    private void loadData() {
        try {
            con = db.getCon();
            cbTPro.removeAllItems();
            cbTDep.removeAllItems();
            cbTPos.removeAllItems();
            
            psTPro = con.prepareStatement("SELECT transferProjectName FROM TransferProject");
            rsTPro = psTPro.executeQuery();
            psTDep = con.prepareStatement("SELECT transferDepartmentName FROM TransferDepartment");
            rsTDep = psTDep.executeQuery();
            psTPos = con.prepareStatement("SELECT transferPositionName FROM TransferPosition");
            rsTPos = psTPos.executeQuery();
            
            while (rsTPro.next()) {
                cbTPro.addItem(rsTPro.getString(1));
            }
            while (rsTDep.next()) {
                cbTDep.addItem(rsTDep.getString(1));
            }
            while (rsTPos.next()) {
                cbTPos.addItem(rsTPos.getString(1));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error:: SQLException !");
            Logger.getLogger(RequestATransfer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnBackground = new javax.swing.JPanel();
        lblTPro = new javax.swing.JLabel();
        lblTDep = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        lblLogo = new javax.swing.JLabel();
        lblTPos = new javax.swing.JLabel();
        lblReason = new javax.swing.JLabel();
        lblRelievingDate = new javax.swing.JLabel();
        lblJoiningDate = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtaReason = new javax.swing.JTextArea();
        btnSubmit = new javax.swing.JButton();
        txtRelievingDate = new com.toedter.calendar.JDateChooser();
        txtJoiningDate = new com.toedter.calendar.JDateChooser();
        lblEmpNumber = new javax.swing.JLabel();
        cbTPro = new javax.swing.JComboBox<>();
        cbTDep = new javax.swing.JComboBox<>();
        cbTPos = new javax.swing.JComboBox<>();
        lblCountRequest = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Request a transfer");

        pnBackground.setBackground(new java.awt.Color(255, 255, 255));

        lblTPro.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        lblTPro.setForeground(new java.awt.Color(51, 51, 51));
        lblTPro.setText("Transfer Project");

        lblTDep.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        lblTDep.setForeground(new java.awt.Color(51, 51, 51));
        lblTDep.setText("Transfer Department");

        lblTitle.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 0, 51));
        lblTitle.setText("Request A Transfer");

        lblLogo.setPreferredSize(new java.awt.Dimension(100, 100));

        lblTPos.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        lblTPos.setForeground(new java.awt.Color(51, 51, 51));
        lblTPos.setText("Transfer Position");

        lblReason.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        lblReason.setForeground(new java.awt.Color(51, 51, 51));
        lblReason.setText("Reason For Transfer");

        lblRelievingDate.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        lblRelievingDate.setForeground(new java.awt.Color(51, 51, 51));
        lblRelievingDate.setText("Transfer Relieving Date");

        lblJoiningDate.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        lblJoiningDate.setForeground(new java.awt.Color(51, 51, 51));
        lblJoiningDate.setText("Transfer Joining Date");

        txtaReason.setColumns(20);
        txtaReason.setRows(5);
        jScrollPane2.setViewportView(txtaReason);

        btnSubmit.setBackground(new java.awt.Color(20, 179, 144));
        btnSubmit.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        cbTPro.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        cbTPro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbTDep.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbTPos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout pnBackgroundLayout = new javax.swing.GroupLayout(pnBackground);
        pnBackground.setLayout(pnBackgroundLayout);
        pnBackgroundLayout.setHorizontalGroup(
            pnBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnBackgroundLayout.createSequentialGroup()
                .addComponent(lblLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(pnBackgroundLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(pnBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnBackgroundLayout.createSequentialGroup()
                        .addComponent(lblEmpNumber)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(101, 101, 101))
                    .addGroup(pnBackgroundLayout.createSequentialGroup()
                        .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(532, Short.MAX_VALUE))
                    .addGroup(pnBackgroundLayout.createSequentialGroup()
                        .addGroup(pnBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTPro, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTPos, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblReason, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbTPro, javax.swing.GroupLayout.Alignment.LEADING, 0, 400, Short.MAX_VALUE)
                            .addComponent(cbTPos, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblTDep)
                                .addComponent(lblJoiningDate)
                                .addComponent(txtJoiningDate, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                                .addComponent(cbTDep, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(pnBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblRelievingDate)
                                .addComponent(txtRelievingDate, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)))
                        .addGap(15, 15, 15))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnBackgroundLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblCountRequest)
                .addContainerGap())
        );
        pnBackgroundLayout.setVerticalGroup(
            pnBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnBackgroundLayout.createSequentialGroup()
                .addComponent(lblCountRequest)
                .addGap(17, 17, 17)
                .addComponent(lblLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTitle)
                .addGap(32, 32, 32)
                .addGroup(pnBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(pnBackgroundLayout.createSequentialGroup()
                        .addComponent(lblTDep)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbTDep))
                    .addGroup(pnBackgroundLayout.createSequentialGroup()
                        .addComponent(lblTPro)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbTPro, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)))
                .addGap(32, 32, 32)
                .addGroup(pnBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTPos)
                    .addComponent(lblRelievingDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtRelievingDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbTPos, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE))
                .addGap(32, 32, 32)
                .addGroup(pnBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnBackgroundLayout.createSequentialGroup()
                        .addComponent(lblJoiningDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtJoiningDate, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnBackgroundLayout.createSequentialGroup()
                        .addComponent(lblReason)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(41, 41, 41)
                .addGroup(pnBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmpNumber))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        Date now = new Date();
        String cPro = null;
        String cDep = null;
        String cPos = null;
        String tPro = null;
        String tDep = null;
        String tPos = null;
        
        while (true) {
            if (txtRelievingDate.getDate() == null) {
                JOptionPane.showMessageDialog(this, "Transfer Relieving Date cannot be left blank!");
                return;
            } else if (txtJoiningDate.getDate() == null) {
                JOptionPane.showMessageDialog(this, "Transfer Joining Date cannot be left blank!");
                txtJoiningDate.grabFocus();
                return;
            } else if (txtaReason.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(this, "Transfer for reason cannot be left blank!");
                txtaReason.grabFocus();
                return;
            } else {
                break;
            }
        }
            
        try {
            String sql1 = "SELECT [transferProjectNumber] FROM [dbo].[TransferProject] WHERE [transferProjectName] = ?";
            String sql2 = "SELECT [transferDepartmentNumber] FROM [dbo].[TransferDepartment] WHERE [transferDepartmentName] = ?";
            String sql3 = "SELECT [transferPositionNumber] FROM [dbo].[TransferPosition] WHERE [transferPositionName] = ?";
            String sql4 = "SELECT [currentProject], [currentDepartment], [currentPosition] FROM [dbo].[Employee] WHERE [empNumber] = ?";
            String sql5 = "INSERT INTO [dbo].[TransferRequests]([transferProjectNumber], [transferDepartmentNumber], [transferPositionNumber], [reason], [dateOfPosting], [transferRelievingDate], [transferJoiningDate],  [approvalDate], [adminNumber], [empNumber], [status], cProject, cDepartment, cPosition) VALUES (?, ?, ?, ?, ?, ?, ?, '', 'admin', ?, 'Waiting Approval', ?, ?, ?)";

            ps = con.prepareStatement(sql1);
            ps.setString(1, (String) cbTPro.getSelectedItem());
            rs = ps.executeQuery();
            while (rs.next()) {
                tPro = rs.getString(1);
            }

            ps = con.prepareStatement(sql2);
            ps.setString(1, (String) cbTDep.getSelectedItem());
            rs = ps.executeQuery();
            while (rs.next()) {
                tDep = rs.getString(1);
            }

            ps = con.prepareStatement(sql3);
            ps.setString(1, (String) cbTPos.getSelectedItem());
            rs = ps.executeQuery();
            while (rs.next()) {
                tPos = rs.getString(1);
            }

            ps = con.prepareStatement(sql4);
            ps.setString(1, lblEmpNumber.getText());
            rs = ps.executeQuery();
            while (rs.next()) {
                cPro = rs.getString(1); 
                cDep = rs.getString(2);
                cPos = rs.getString(3);
            }
            
            ps = con.prepareStatement(sql5);
            ps.setString(1, tPro);
            ps.setString(2, tDep);
            ps.setString(3, tPos);
            ps.setString(4, txtaReason.getText());
            ps.setString(5, ft.format(now));
            ps.setString(6, ft.format(txtRelievingDate.getDate()));
            ps.setString(7, ft.format(txtJoiningDate.getDate()));
            ps.setString(8, lblEmpNumber.getText());
            ps.setString(9, cPro);
            ps.setString(10, cDep);
            ps.setString(11, cPos);
            ps.executeUpdate();

            JOptionPane.showMessageDialog(this, "Your transfer request has been recorded");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error:: SQLException");
            Logger.getLogger(RequestATransfer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSubmitActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox<String> cbTDep;
    private javax.swing.JComboBox<String> cbTPos;
    private javax.swing.JComboBox<String> cbTPro;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCountRequest;
    private javax.swing.JLabel lblEmpNumber;
    private javax.swing.JLabel lblJoiningDate;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblReason;
    private javax.swing.JLabel lblRelievingDate;
    private javax.swing.JLabel lblTDep;
    private javax.swing.JLabel lblTPos;
    private javax.swing.JLabel lblTPro;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnBackground;
    private com.toedter.calendar.JDateChooser txtJoiningDate;
    private com.toedter.calendar.JDateChooser txtRelievingDate;
    private javax.swing.JTextArea txtaReason;
    // End of variables declaration//GEN-END:variables
}

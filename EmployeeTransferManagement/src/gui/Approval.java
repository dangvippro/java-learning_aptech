package gui;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class Approval extends javax.swing.JFrame {

    Connection con;
    PreparedStatement ps;
    ResultSet rs;
    DefaultTableModel tblModel;
    Vector row;
    server.DBHelper db = new server.DBHelper();
    
    public Approval() {
        initComponents();
        ImageIcon img = new ImageIcon("image//Approval1.png");
        this.setIconImage(img.getImage());
        
        btnAccept.setSize(100,50);
        new SetImage().setImageButton(btnAccept, "image//accept.png");
        btnDeny.setSize(100,50);
        new SetImage().setImageButton(btnDeny, "image//cancel.png");
        btnRefresh.setSize(20,20);
        new SetImage().setImageButton(btnRefresh, "image//refresh.png");
        btnAccept.setEnabled(false);
        btnDeny.setEnabled(false);
        
        tblModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tblModel.addColumn("ID");
        tblModel.addColumn("Name");
        tblModel.addColumn("Date Of Birth");
        tblModel.addColumn("Current Project");
        tblModel.addColumn("Transfer Project");
        tblModel.addColumn("Current DepartMent");
        tblModel.addColumn("Transfer DepartMent");
        tblModel.addColumn("Current Position");
        tblModel.addColumn("Transfer Position");
        tblModel.addColumn("Allowance");
        tblModel.addColumn("Reason");
        tblModel.addColumn("Relieving Date");
        tblModel.addColumn("Joining Date");
        tblModel.addColumn("Posting Date");
        tblApproval.setModel(tblModel);
        
        LoadTable();
    }

    public void LoadTable() {
        try {
            con = db.getCon();
            ps = con.prepareStatement("SELECT req.transferRequestNumber, e.fullname, e.dateOfBirth, e.currentProject, tPro.transferProjectName, e.currentDepartment, Dep.transferDepartmentName, e.currentPosition, Pos.transferPositionName, Pos.allowanceLevel, req.reason, req.transferRelievingDate, req.transferJoiningDate, req.dateOfPosting, req.approvalDate FROM TransferRequests AS req INNER JOIN Employee AS e ON req.empNumber = e.empNumber INNER JOIN TransferProject AS tPro ON req.transferProjectNumber = tPro.transferProjectNumber INNER JOIN TransferDepartment AS Dep ON Req.transferDepartmentNumber = Dep.transferDepartmentNumber INNER JOIN TransferPosition AS Pos ON req.transferPositionNumber = Pos.transferPositionNumber WHERE req.[status] = 'Waiting Approval'");
            rs = ps.executeQuery();
            row = new Vector();
            
            while (rs.next()) {
                row = new Vector();
                row.add(rs.getString(1));
                row.add(rs.getString(2));
                row.add(rs.getString(3));
                row.add(rs.getString(4));
                row.add(rs.getString(5));
                row.add(rs.getString(6));
                row.add(rs.getString(7));
                row.add(rs.getString(8));
                row.add(rs.getString(9));
                row.add(rs.getString(10));
                row.add(rs.getString(11));
                row.add(rs.getString(12));
                row.add(rs.getString(13));
                row.add(rs.getString(14));
                tblModel.addRow(row);
            }
            if (row.isEmpty()) {
                tblModel.addRow(row);
                btnAccept.setEnabled(false);
                btnDeny.setEnabled(false);
            }
            tblApproval.setModel(tblModel);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error:: SQLException");
            Logger.getLogger(Approval.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblApproval = new javax.swing.JTable();
        lblTitle = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        btnDeny = new javax.swing.JButton();
        btnAccept = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Approval Transfer Request");
        setAlwaysOnTop(true);

        tblApproval.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblApproval.getTableHeader().setReorderingAllowed(false);
        tblApproval.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblApprovalMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblApproval);

        lblTitle.setFont(new java.awt.Font("sansserif", 0, 48)); // NOI18N
        lblTitle.setText("Approval ");

        btnDeny.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        btnDeny.setText("Deny");
        btnDeny.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDenyActionPerformed(evt);
            }
        });

        btnAccept.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        btnAccept.setText("Accept");
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(btnAccept)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 152, Short.MAX_VALUE)
                .addComponent(btnDeny)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeny)
                    .addComponent(btnAccept))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 36, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(316, 316, 316))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnRefresh)
                                .addGap(251, 251, 251)
                                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 971, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(33, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnRefresh)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed
        int line = tblApproval.getSelectedRow();
        try {
            Date date = new Date();
            Integer year = date.getYear() + 1900;
            Integer month = date.getMonth() + 1;
            Integer day = date.getDate();
            String approvalDate = year + "-" + month + "-" + day;
            
            PreparedStatement ps = con.prepareStatement("UPDATE TransferRequests SET status = 'Approved', approvalDate = ? WHERE transferRequestNumber = ?");
            ps.setString(1, approvalDate);
            ps.setString(2, (String) tblApproval.getValueAt(line, 0));
            ps.executeUpdate();
            JOptionPane.showMessageDialog(this, "The transfer request has approved");
            tblModel.getDataVector().removeAllElements();
            LoadTable();
            btnAccept.setEnabled(false);
            btnDeny.setEnabled(false);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error:: SQLException");
            Logger.getLogger(Approval.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAcceptActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        tblModel.getDataVector().removeAllElements();
        btnAccept.setEnabled(false);
        btnDeny.setEnabled(false);
        LoadTable();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void tblApprovalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblApprovalMouseClicked
        btnAccept.setEnabled(true);
        btnDeny.setEnabled(true);
        int line = tblApproval.getSelectedRow();
        
    }//GEN-LAST:event_tblApprovalMouseClicked

    private void btnDenyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDenyActionPerformed
        int line = tblApproval.getSelectedRow();
        try {
            Date date = new Date();
            Integer year = date.getYear() + 1900;
            Integer month = date.getMonth() + 1;
            Integer day = date.getDate();
            String approvalDate = year + "-" + month + "-" + day;
            
            PreparedStatement ps = con.prepareStatement("UPDATE TransferRequests SET status = 'Denied', approvalDate = ? WHERE transferRequestNumber = ?");
            ps.setString(1, approvalDate);
            ps.setString(2, (String) tblApproval.getValueAt(line, 0));
            ps.executeUpdate();
            JOptionPane.showMessageDialog(this, "The transfer request has denied");
            tblModel.getDataVector().removeAllElements();
            LoadTable();
            btnAccept.setEnabled(false);
            btnDeny.setEnabled(false);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error:: SQLException");
            Logger.getLogger(Approval.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDenyActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnDeny;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblApproval;
    // End of variables declaration//GEN-END:variables
}

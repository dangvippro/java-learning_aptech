package gui;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class DecisionTransferEmployee extends javax.swing.JFrame {

    Connection con;
    PreparedStatement ps;
    ResultSet rs;
    DefaultTableModel tblModel;
    Vector row;
    server.DBHelper db = new server.DBHelper();
    ResultSet rsTPro;
    PreparedStatement psTPro;
    ResultSet rsTDep;
    PreparedStatement psTDep;
    ResultSet rsTPos;
    PreparedStatement psTPos;
    SimpleDateFormat ft = new SimpleDateFormat("yyyy/MM/dd");
    
    public DecisionTransferEmployee(String adminNumber) {
        initComponents();
        lblAdminNumber.setText(adminNumber);
        lblAdminNumber.setVisible(false);
        lblCountRequest.setText("0");
        lblCountRequest.setVisible(false);
        txtEmpID.setEnabled(false);
        
        tblModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tblModel.addColumn("Employe Number");
        tblModel.addColumn("Fullname");
        tblModel.addColumn("Date Of Birth");
        tblModel.addColumn("Gender");
        tblModel.addColumn("Email");
        tblModel.addColumn("Address");
        tblModel.addColumn("Role");
        tblModel.addColumn("Work Experience");
        tblModel.addColumn("Current Project");
        tblModel.addColumn("Current DepartMent");
        tblModel.addColumn("Current Position");
        tblModel.addColumn("Allowace Level");
        tblModel.addColumn("Date Start Work");
        tblModel.addColumn("Note");
        tblDecisionTransfer.setModel(tblModel);
        
        LoadTable();
        loadData();
    }

    public void LoadTable() {
        try {
            con = db.getCon();
            ps = con.prepareStatement("SELECT empNumber, fullname, dateOfBirth, gender, email, address, role, workExperience, currentProject, currentDepartment, currentPosition, allowanceLevel, dateStartWork, note FROM Employee");
            rs = ps.executeQuery();
            row = new Vector();
            
            while (rs.next()) {
                row = new Vector();
                row.add(rs.getString(1));
                row.add(rs.getString(2));
                row.add(rs.getString(3));
                row.add(rs.getString(4));
                row.add(rs.getString(5));
                row.add(rs.getString(6));
                row.add(rs.getString(7));
                row.add(rs.getString(8));
                row.add(rs.getString(9));
                row.add(rs.getString(10));
                row.add(rs.getString(11));
                row.add(rs.getString(12));
                row.add(rs.getString(13));
                row.add(rs.getString(14));
                tblModel.addRow(row);
            }
            if (row.isEmpty()) {
                tblModel.addRow(row);
            }
            tblDecisionTransfer.setModel(tblModel);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error:: SQLException");
            Logger.getLogger(Approval.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadData() {
        try {
            con = db.getCon();
            cbTPro.removeAllItems();
            cbTDep.removeAllItems();
            cbTPos.removeAllItems();
            
            psTPro = con.prepareStatement("SELECT transferProjectName FROM TransferProject");
            rsTPro = psTPro.executeQuery();
            psTDep = con.prepareStatement("SELECT transferDepartmentName FROM TransferDepartment");
            rsTDep = psTDep.executeQuery();
            psTPos = con.prepareStatement("SELECT transferPositionName FROM TransferPosition");
            rsTPos = psTPos.executeQuery();
            
            while (rsTPro.next()) {
                cbTPro.addItem(rsTPro.getString(1));
            }
            while (rsTDep.next()) {
                cbTDep.addItem(rsTDep.getString(1));
            }
            while (rsTPos.next()) {
                cbTPos.addItem(rsTPos.getString(1));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error:: SQLException !");
            Logger.getLogger(RequestATransfer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jcroll_emp_transfer_table = new javax.swing.JScrollPane();
        tblDecisionTransfer = new javax.swing.JTable();
        jbEmpID = new javax.swing.JLabel();
        txtEmpID = new javax.swing.JTextField();
        jbReason = new javax.swing.JLabel();
        jcroll_note = new javax.swing.JScrollPane();
        txtaReason = new javax.swing.JTextArea();
        jbCurrentDepartment = new javax.swing.JLabel();
        jbMovePosition = new javax.swing.JLabel();
        jbDateStartWork = new javax.swing.JLabel();
        btnCreateLetter = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        txtRelievingDate = new com.toedter.calendar.JDateChooser();
        jbMovePosition1 = new javax.swing.JLabel();
        cbTPos = new javax.swing.JComboBox<>();
        cbTPro = new javax.swing.JComboBox<>();
        cbTDep = new javax.swing.JComboBox<>();
        jbDateStartWork1 = new javax.swing.JLabel();
        txtJoiningDate = new com.toedter.calendar.JDateChooser();
        lblAdminNumber = new javax.swing.JLabel();
        lblCountRequest = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Decision Transfer Employee");

        tblDecisionTransfer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblDecisionTransfer.getTableHeader().setReorderingAllowed(false);
        tblDecisionTransfer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDecisionTransferMouseClicked(evt);
            }
        });
        jcroll_emp_transfer_table.setViewportView(tblDecisionTransfer);

        jbEmpID.setText("Employee ID: ");

        jbReason.setText("Reason");

        txtaReason.setColumns(20);
        txtaReason.setRows(5);
        jcroll_note.setViewportView(txtaReason);

        jbCurrentDepartment.setText("Transfer Department:");

        jbMovePosition.setText("Transfer Project");

        jbDateStartWork.setText("Transfer Relieving Date");

        btnCreateLetter.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        btnCreateLetter.setText("Transfer");
        btnCreateLetter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateLetterActionPerformed(evt);
            }
        });

        btnReset.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        jbMovePosition1.setText("Transfer Position");

        cbTPos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbTPro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbTDep.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jbDateStartWork1.setText("Transfer Joining Date");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jcroll_emp_transfer_table)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(197, 197, 197)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcroll_note, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEmpID, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jbEmpID)
                            .addComponent(jbDateStartWork)
                            .addComponent(jbMovePosition)
                            .addComponent(jbReason))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbTPro, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtRelievingDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(358, 358, 358)
                                .addComponent(jbCurrentDepartment)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cbTDep, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jbMovePosition1)
                                    .addComponent(jbDateStartWork1))
                                .addGap(37, 37, 37)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cbTPos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtJoiningDate, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(81, 81, 81))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(btnCreateLetter, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblAdminNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblCountRequest)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jcroll_emp_transfer_table, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jbCurrentDepartment)
                            .addComponent(cbTDep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jbMovePosition1)
                            .addComponent(cbTPos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtJoiningDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbDateStartWork1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnCreateLetter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jbEmpID)
                            .addComponent(txtEmpID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jbMovePosition)
                            .addComponent(cbTPro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtRelievingDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbDateStartWork))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcroll_note, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbReason))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblAdminNumber)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblCountRequest))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateLetterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateLetterActionPerformed
        Date now = new Date();
        String cPro = null;
        String cDep = null;
        String cPos = null;
        String tPro = null;
        String tDep = null;
        String tPos = null;
        String empNumber = null;
        
        while (true) {
            try {
                ps = con.prepareStatement("SELECT * FROM Employee WHERE empNumber = ?");
                ps.setString(1, txtEmpID.getText().trim());
                rs = ps.executeQuery();
                if (txtRelievingDate.getDate() == null) {
                    JOptionPane.showMessageDialog(this, "Transfer Relieving Date cannot be left blank!");
                    return;
                } else if (txtJoiningDate.getDate() == null) {
                    JOptionPane.showMessageDialog(this, "Transfer Joining Date cannot be left blank!");
                    txtJoiningDate.grabFocus();
                    return;
                } else if (txtaReason.getText().trim().equals("")) {
                    JOptionPane.showMessageDialog(this, "Transfer for reason cannot be left blank!");
                    txtaReason.grabFocus();
                    return;
                } else if (!(rs.next())) {
                    JOptionPane.showMessageDialog(this, "The empNumber is not exist!");
                    txtaReason.grabFocus();
                    return;
                } else {
                    empNumber = rs.getString("empNumber");
                    break;
                }
            } catch (SQLException ex) {
                Logger.getLogger(DecisionTransferEmployee.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        try {
            String sql1 = "SELECT [transferProjectNumber] FROM [dbo].[TransferProject] WHERE [transferProjectName] = ?";
            String sql2 = "SELECT [transferDepartmentNumber] FROM [dbo].[TransferDepartment] WHERE [transferDepartmentName] = ?";
            String sql3 = "SELECT [transferPositionNumber] FROM [dbo].[TransferPosition] WHERE [transferPositionName] = ?";
            String sql4 = "SELECT [currentProject], [currentDepartment], [currentPosition] FROM [dbo].[Employee] WHERE [empNumber] = ?";
            String sql5 = "INSERT INTO [dbo].[TransferRequests]([transferRequestNumber], [transferProjectNumber], [transferDepartmentNumber], [transferPositionNumber], [reason], [dateOfPosting], [transferRelievingDate], [transferJoiningDate],  [approvalDate], [adminNumber], [empNumber], [status], cProject, cDepartment, cPosition) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'Approved', ?, ?, ?)";

            ps = con.prepareStatement(sql1);
            ps.setString(1, (String) cbTPro.getSelectedItem());
            rs = ps.executeQuery();
            while (rs.next()) {
                tPro = rs.getString(1);
            }

            ps = con.prepareStatement(sql2);
            ps.setString(1, (String) cbTDep.getSelectedItem());
            rs = ps.executeQuery();
            while (rs.next()) {
                tDep = rs.getString(1);
            }

            ps = con.prepareStatement(sql3);
            ps.setString(1, (String) cbTPos.getSelectedItem());
            rs = ps.executeQuery();
            while (rs.next()) {
                tPos = rs.getString(1);
            }

            ps = con.prepareStatement(sql4);
            ps.setString(1, empNumber);
            rs = ps.executeQuery();
            while (rs.next()) {
                cPro = rs.getString(1); 
                cDep = rs.getString(2);
                cPos = rs.getString(3);
            }
            
            int id = Integer.parseInt(lblCountRequest.getText())+1;
            lblCountRequest.setText("" + id);
            String reqID = "TR" + id;
            lblCountRequest.setText(reqID);
            
            ps = con.prepareStatement(sql5);
            ps.setString(1, reqID);
            ps.setString(2, tPro);
            ps.setString(3, tDep);
            ps.setString(4, tPos);
            ps.setString(5, txtaReason.getText());
            ps.setString(6, ft.format(now));
            ps.setString(7, ft.format(txtRelievingDate.getDate()));
            ps.setString(8, ft.format(txtJoiningDate.getDate()));
            ps.setString(9, ft.format(now));
            ps.setString(10, lblAdminNumber.getText().trim());
            ps.setString(11, empNumber);
            ps.setString(12, cPro);
            ps.setString(13, cDep);
            ps.setString(14, cPos);
            ps.executeUpdate();

            JOptionPane.showMessageDialog(this, "Your transfer request has been recorded");
            tblModel.getDataVector().removeAllElements();
            LoadTable();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error:: SQLException");
            Logger.getLogger(RequestATransfer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnCreateLetterActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        txtaReason.setText("");
        txtRelievingDate.setDate(null);
        txtJoiningDate.setDate(null);
        txtEmpID.setText("");
    }//GEN-LAST:event_btnResetActionPerformed

    private void tblDecisionTransferMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDecisionTransferMouseClicked
        int row = tblDecisionTransfer.getSelectedRow();
        if (row == -1) {
            return;
        } else {
            txtEmpID.setText((String) tblDecisionTransfer.getValueAt(row, 0));
        }
    }//GEN-LAST:event_tblDecisionTransferMouseClicked

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateLetter;
    private javax.swing.JButton btnReset;
    private javax.swing.JComboBox<String> cbTDep;
    private javax.swing.JComboBox<String> cbTPos;
    private javax.swing.JComboBox<String> cbTPro;
    private javax.swing.JLabel jbCurrentDepartment;
    private javax.swing.JLabel jbDateStartWork;
    private javax.swing.JLabel jbDateStartWork1;
    private javax.swing.JLabel jbEmpID;
    private javax.swing.JLabel jbMovePosition;
    private javax.swing.JLabel jbMovePosition1;
    private javax.swing.JLabel jbReason;
    private javax.swing.JScrollPane jcroll_emp_transfer_table;
    private javax.swing.JScrollPane jcroll_note;
    private javax.swing.JLabel lblAdminNumber;
    private javax.swing.JLabel lblCountRequest;
    private javax.swing.JTable tblDecisionTransfer;
    private javax.swing.JTextField txtEmpID;
    private com.toedter.calendar.JDateChooser txtJoiningDate;
    private com.toedter.calendar.JDateChooser txtRelievingDate;
    private javax.swing.JTextArea txtaReason;
    // End of variables declaration//GEN-END:variables
}
